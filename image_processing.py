# -*- coding: utf-8 -*-
"""IMAGE-PROCESSING.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17JJyv13ZoPxsyAJJtzlvcjXeSrqSzDxT

**IMPORT LIBRARIES**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import cv2

"""**IMAGES STORING**"""

images = []
for i in range(0,16):
  images.append(cv2.imread(f'8_{i+1}.jpg'))

"""**TESTING**"""

plt.figure(figsize=(6,6))
plt.imshow(images[0])
plt.axis('on')

"""**CONVERTING TO GRAY SCALE**"""

img_gray=[]
for i in range(0,16):
  if len(images[i].shape) == 3 and images[i].shape[2] == 3:
        img_gray.append(cv2.cvtColor(images[i], cv2.COLOR_BGR2GRAY))
  else:
        img_gray.append(images[i])

"""**TESTING - GRAY SCALE**"""

plt.figure(figsize=(6,6))
plt.imshow(img_gray[4])
plt.axis('on')

"""**EXTRACTING ROW & COLUMN NUMS FOR FLATENING VALUES**"""

row=[]
for m in range(0,48):
  for n in range(0,48):
    row.append(m)

column=[]
for m in range(0,48):
  for n in range(0,48):
    column.append(n)

"""**EXTRACTING PIXEL VALUES FROM EACH IMG-GRAY IMAGE**"""

pixels_img=[]
for i in range(0,16):
  pixels=[]
  for m in range(0,48):
    for n in range(0,48):
      img = img_gray[i]
      pixels.append(img[m][n])
  pixels_img.append(pixels)

len(pixels_img[0])*16

"""**DATA-FRAME CREATION**"""

data = pd.DataFrame({'Row': row,'Column': column})

data

"""**APPENDING FLATTEN PIXEL VALUES OF EACH IMAGE INTO THE DATA-FRAME**"""

for i in range(0,16):
  df = pd.DataFrame({f'pixel[{i+1}]':pixels_img[i]})
  data = pd.concat([data,df],axis=1)

data.head()

data.to_csv('output.csv')

"""**EXTRACTING MEAN PIXEL VALUES INTO ARRAY**"""

pixel_mean=[]
for i in range(0,data.shape[0]):
  sum = 0
  for j in range(0,len(pixels_img)):
    sum = sum + pixels_img[j][i]
  pixel_mean.append((sum/16))

len(pixel_mean)

data_mean = pd.DataFrame({'pixel_mean':pixel_mean})

data = pd.concat([data,data_mean],axis=1)

data.head()

data.to_csv('8_digit_48x48_16imgs.csv')

"""**GENERATION OF IMAGE**"""

img4 = np.array(pixel_mean).reshape(48,48)

plt.imshow(img, cmap='gray')
plt.axis('off')
title = plt.title('            THIS IMG DOES NOT EXIST - ANSH/P          ',color='yellow')
title.set_bbox({'facecolor': 'black', 'alpha': 1})
plt.show()

